<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>路易斯.李的专栏</title>
    <description>THIS IS LOUIS LEE&#39;S PAGE!
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 26 Feb 2015 17:52:10 +0800</pubDate>
    <lastBuildDate>Thu, 26 Feb 2015 17:52:10 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>JFinal所集成的插件们</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.jfinal.com/&quot;&gt;JFinal&lt;/a&gt; 是基于 Java 语言的极速 WEB + ORM 框架，其核心设计目标是开发迅速、代码量少、学习简单、功能强大、轻量级、易扩展、Restful。 在拥有Java语言所有优势的同时再拥有ruby、python、php等动态语言的开发效率！为您节约更多时间，去陪恋人、家人和朋友 :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jetty-server-xxxxjar-----jetty-&quot;&gt;jetty-server-xxxx.jar — Jetty 服务器&lt;/h2&gt;

&lt;p&gt;JFinal集成了&lt;a href=&quot;http://www.eclipse.org/jetty/&quot;&gt;Jetty&lt;/a&gt;，所以除了Apache外，服务器也可以用Jetty 。官方文档给出的demo里是用jetty做服务器，不过有个&lt;strong&gt;&lt;em&gt;特别注意&lt;/em&gt;&lt;/strong&gt;：在新建项目的时候，&lt;strong&gt;&lt;em&gt;Default output folder&lt;/em&gt;&lt;/strong&gt;必须是&lt;strong&gt;&lt;em&gt;WebRoot\WEB-INF\classes&lt;/em&gt;&lt;/strong&gt; 才可以使用JFinal集成的Jetty来启动项目。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;官网：&lt;a href=&quot;http://www.eclipse.org/jetty/&quot;&gt;http://www.eclipse.org/jetty/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/eclipse/jetty.project&quot;&gt;https://github.com/eclipse/jetty.project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;c3p0-xxxxjar-----c3p0-&quot;&gt;c3p0-xxxx.jar — C3p0 数据库连接池插件&lt;/h2&gt;
&lt;p&gt;官方文档给出的 demo 代码配置了 C3p0 数据库连接池插件与 ActiveRecord数据库访问插件。通过以下的配置，可以在应用中使用 ActiveRecord 非常方便地操作数据库。 &lt;/p&gt;

&lt;p&gt;&lt;code&gt;java
public void configPlugin(Plugins me) {
    loadPropertyFile(&quot;your_app_config.txt&quot;);  
    C3p0Plugin c3p0Plugin = new C3p0Plugin(getProperty(&quot;jdbcUrl&quot;),  
                getProperty(&quot;user&quot;), getProperty(&quot;password&quot;));  
    me.add(c3p0Plugin);  
    ActiveRecordPlugin arp = new ActiveRecordPlugin(c3p0Plugin);  
    me.add(arp);  
    arp.addMapping(&quot;user&quot;, User.class); 
} 
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;官网：&lt;a href=&quot;http://www.mchange.com/projects/c3p0&quot;&gt;http://www.mchange.com/projects/c3p0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/swaldman/c3p0&quot;&gt;https://github.com/swaldman/c3p0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;druid-xxxxjar-----druid&quot;&gt;druid-xxxx.jar — Druid连接池插件&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Druid是一个JDBC组件库，包括数据库连接池、SQL Parser等组件。DruidDataSource是最好的数据库连接池。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Druid 与 C3p0 都是数据库连接池，他们两个都被JFinal所集成。至于谁的性能更好，谁的效率更高，那只有用过才知道。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/alibaba/druid&quot;&gt;https://github.com/alibaba/druid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jfinal-ext-xxxxjar-----jfinal&quot;&gt;jfinal-ext-xxxx.jar — JFinal框架的扩展插件&lt;/h2&gt;
&lt;p&gt;Jfinal-ext 是对 java 极速 web 框架 Jfinal 的功能扩展，主要功能有：自动绑定表，分优先级加载配置文件，等对其他功能的扩展。详细介绍&lt;a href=&quot;https://github.com/b1412/jfinal-ext/blob/master/doc/doc.org&quot;&gt;请移步&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/b1412/jfinal-ext&quot;&gt;https://github.com/b1412/jfinal-ext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be continued…&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Dec 2014 01:07:10 +0800</pubDate>
        <link>http://yourdomain.com/%E5%AD%A6%E4%B9%A0/2014/12/13/JFinal%E6%89%80%E9%9B%86%E6%88%90%E7%9A%84%E6%8F%92%E4%BB%B6%E4%BB%AC.html</link>
        <guid isPermaLink="true">http://yourdomain.com/%E5%AD%A6%E4%B9%A0/2014/12/13/JFinal%E6%89%80%E9%9B%86%E6%88%90%E7%9A%84%E6%8F%92%E4%BB%B6%E4%BB%AC.html</guid>
        
        <category>JFinal</category>
        
        
        <category>学习</category>
        
      </item>
    
      <item>
        <title>使用Git管理自己的项目</title>
        <description>&lt;h2 id=&quot;git&quot;&gt;版本控制系统-Git&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;版本控制系统就好比银行保险箱。保险箱保管有价值的资产，保证它们的安全。对程序员来讲，源代码就是这样的资产，有版本控制系统来保管。版本控制系统把程序员所完成并提交（commit）的任何修改都记录下来，供日后查询检索。这个功能就好像银行提供的对账单一样。&lt;/p&gt;

&lt;p&gt;在Git的世界里，可以随身带着有自动取款机的保险箱到处走。这意味着，你既可以完全断开和别人的连接以独立工作，也可以在适当的时候与大家沟通分享工作成果。当然，Git也具有记录和跟踪代码修改历史这样的基本功能。当初Linus Torvalds创造Git是为了跟踪Linux内核的修改情况。他用几周时间完成了基本的雏形。随着时间的推移，Git已经从最初简陋的脚本发展成为功能丰富的工具包。&lt;/p&gt;

&lt;h2 id=&quot;git-1&quot;&gt;安装Git&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;在不同系统的安装&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Windows: Download &amp;amp; install &lt;a href=&quot;http://msysgit.github.io/&quot;&gt;msysgit&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Mac: Install it with &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;, &lt;a href=&quot;http://www.macports.org/&quot;&gt;MacPorts&lt;/a&gt; or &lt;a href=&quot;http://code.google.com/p/git-osx-installer/&quot;&gt;installer&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Linux (Ubuntu, Debian): &lt;strong&gt;&lt;em&gt;sudo apt-get install git-core&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Linux (Fedora, Red Hat, CentOS): &lt;strong&gt;&lt;em&gt;sudo yum install git-core&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Windows
    &lt;ul&gt;
      &lt;li&gt;Windows下安装mysgit的时候，在&lt;strong&gt;&lt;em&gt;Adjusting your PATH environment&lt;/em&gt;&lt;/strong&gt;这一步中，有三种选择。一般来说，请选择第二种&lt;strong&gt;&lt;em&gt;Run Git from the Windows&lt;/em&gt;&lt;/strong&gt;，以便Git可以从Windows命令行环境中直接运行，同时又不会因为添加了额外的设置而给Windows命令行环境带来潜在的问题。&lt;/li&gt;
      &lt;li&gt;不过Linuxer可以根据自己的需要选择第三种&lt;strong&gt;&lt;em&gt;Run Git and included Unix tools from the Windows Command Prompt&lt;/em&gt;&lt;/strong&gt;，这会覆盖Windows中的一些工具，像find.exe和sort.exe等。&lt;/li&gt;
      &lt;li&gt;另外，选择第三种后，你会发现在Windows命令行中运行Linux命令时候，中文显示会乱码。解决方法参考[]()。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git-2&quot;&gt;设置Git&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;安装之后，首先要设置&lt;strong&gt;&lt;em&gt;user.name&lt;/em&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;em&gt;user.email&lt;/em&gt;&lt;/strong&gt;两个全局变量值。第一个值用来说明版本历史上的一个修改是谁提交的。第二个值是邮件地址，以方便联系修改者。
示例如下,当然，实践中你得换成自己的名字：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git config --global user.name &quot;Your Name&quot;
$ git config --global user.email &quot;youname@gmail.com&quot; 仅这两个全局变量值是必须设置的。但所有可设置的值超过130个。其中大部分都很少用得上。下面列举一些可能常用的设置：
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;颜色设置&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git config --global color.ui &quot;auto&quot;     建议mysgit用户把该值设为“always”而非“auto”，这样不仅在Bash环境中是彩色的，在Windows命令行环境中也是彩色的。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;编辑器设置&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git config --global core.editor &quot;vim&quot; 像***commit***和***tag***这样的命令在执行的时候会打开默认的编辑器提供编辑功能，而编辑器设置的顺序是***$GIT_EDITOR***环境变量，然后是***core.editor***设置，接着是***$VISUAL***，然后***$EDITOR***，最后是在编译时候的默认选择***vi***（其中像$GIT_EDITOR这样的环境变量是用***git var***命令来设置的，详情请看其他设置）。而vi的编辑方式对于Winer们来说太过繁琐，似乎渐渐被高效的vim取缔了，所以我们通常使用的编辑器变成了vim。当然，你也可以设置其他的编辑器。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;其他设置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果在本机中安了Git文档，则可通过运行命令&lt;strong&gt;&lt;em&gt;git help config&lt;/em&gt;&lt;/strong&gt;列出所有设置变量值，也可以访问&lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-config.html#_varibles&quot;&gt;git设置文档&lt;/a&gt;。可通过运行命令&lt;strong&gt;&lt;em&gt;git help var&lt;/em&gt;&lt;/strong&gt;列出所有环境变量值，也可以访问&lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-var.html&quot;&gt;git环境变量设置文档&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;创建项目&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;本地版本库的创建&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;创建一个新项目，并命名为&lt;strong&gt;&lt;em&gt;mysite&lt;/em&gt;&lt;/strong&gt;。首先创建一个同名目录“mysite”，并进入该目录，然后输入命令git init。过程如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir mysite
$ cd mysite
$ git init
Initialized empty Git repository in /mysite/.git/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建完成。从现在开始，这个Git版本库就可以用来记录和跟踪该项目的代码了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;远程版本库与本地版本库的链接&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;此时这个版本库还没有被&lt;strong&gt;&lt;em&gt;push&lt;/em&gt;&lt;/strong&gt;（推入）到Github上，所以只能进行本地版本库的跟踪和修改。当然，如果你是个人开发并且不会上传或开源到Github上的话，git完全会满足你的需求。但是，若是这个项目是由多个人合作或者你想对其进行开源开发的话，这时候你就要考虑注册一个Github账号了。&lt;/p&gt;

&lt;p&gt;假定你已经有了一个Github账号，并且已经新建了一个名为&lt;strong&gt;&lt;em&gt;mysite&lt;/em&gt;&lt;/strong&gt;的repository（代码仓库）。这时，你可以接上上一个步骤，然后将本地的版本库与远程版本库进行一个连接。给远程版本库取名&lt;strong&gt;&lt;em&gt;origin&lt;/em&gt;&lt;/strong&gt;，并其值设置为mysite的url:&lt;strong&gt;&lt;em&gt;https://github.com/YOURNAME/mysite&lt;/em&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote add origin https://github.com/YOUNAME/mysite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者，直接忽略上一个步骤，直接克隆你新建的远程版本库&lt;strong&gt;&lt;em&gt;mysite&lt;/em&gt;&lt;/strong&gt;到本地。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/YOURNAME/mysite 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后你会发现当前目录下有一个已经初始化并与远程版本库连接的本地版本库。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对本地分支进行修改并推入到远程版本库&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;进入本地分支&lt;strong&gt;&lt;em&gt;mysite&lt;/em&gt;&lt;/strong&gt;，然后可以对此目录进行添加或者修改文件，接着对修改后的文件进行添加并提交，最后推入到远程版本库。过程如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /mysite
...                                    #修改
$ git add *                            #添加所有修改到索引（index）区
$ git commit -m &quot;代码提交信息&quot;           #提交修改信息到HEAD区  
$ git push origin master               #把所有提交推入到远程版本库
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;git-3&quot;&gt;git工作流程&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;你的本地仓库由 git 维护的三棵“树”组成。第一个是你的工作目录，它持有实际文件；第二个是缓存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，指向你最近一次提交后的结果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../_images/trees.png&quot; alt=&quot;工作流程&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;链接与资源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bootcss.com/p/git-guide/&quot;&gt;Git 使用简易指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/07/git.html&quot;&gt;Git 分支管理策略&lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://git-scm.com/doc&quot;&gt;Git 官方文档【英文版】&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf&quot;&gt;Git 使用说明书【英文版】【PDF】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 10 Dec 2014 01:07:10 +0800</pubDate>
        <link>http://yourdomain.com/%E5%AD%A6%E4%B9%A0/2014/12/10/%E4%BD%BF%E7%94%A8Git%E7%AE%A1%E7%90%86%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE.html</link>
        <guid isPermaLink="true">http://yourdomain.com/%E5%AD%A6%E4%B9%A0/2014/12/10/%E4%BD%BF%E7%94%A8Git%E7%AE%A1%E7%90%86%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE.html</guid>
        
        <category>Git</category>
        
        
        <category>学习</category>
        
      </item>
    
  </channel>
</rss>
